#version 460

#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable

#define RT_SHADER
#define RAYGEN_PAYLOAD
#include "common.h"

void main()
{
	const uint64_t clock = raysterizer_info.show_heatmap ? clockARB() : 0;

	// Initialise separate random seeds for the pixel and the rays.
	// - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
	// - ray: we want a noisy random seed, different for each pixel.
	uint pixelRandomSeed = raysterizer_info.random_seed;
	payload.random_seed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), raysterizer_info.total_number_of_samples);

    const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
    const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);
    
	vec3 pixelColor = vec3(0);

	// Accumulate all the rays for this pixels.
	for (uint s = 0; s < raysterizer_info.number_of_samples; ++s)
	{
		const vec2 pixel_center = vec2(pixel.x + RandomFloat(pixelRandomSeed), pixel.y + RandomFloat(pixelRandomSeed));
        const vec2 uv = pixel_center / resolution;
		vec2 d = uv * 2.0 - 1.0;
		d.y = -d.y;

		/*
		vec2 offset = Camera.Aperture/2 * RandomInUnitDisk(Ray.RandomSeed);
		vec4 origin = Camera.ModelViewInverse * vec4(offset, 0, 1);
		vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
		vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance - vec3(offset, 0)), 0);
		*/
		vec3 rayColor = vec3(1);

		//https://stackoverflow.com/questions/53467077/opengl-ray-tracing-using-inverse-transformations
		mat4 inv_proj_view = inverse(raysterizer_info.projection_view);
		//vec4 origin = inv_proj_view * vec4(d.x, d.y, 0, 1);
		vec4 origin = inv_proj_view * vec4(0.0, 0.0, raysterizer_info.z_near, 1);
		//vec4 origin = inv_proj_view * vec4(d.x, d.y, raysterizer_info.z_near, 1);
		vec4 target = inv_proj_view * vec4(d.x, d.y, raysterizer_info.z_far, 1);
		origin.xyz /= origin.w;
		origin.w = 1.0f / origin.w;
		target.xyz /= target.w;
		target.w = 1.0f / target.w;
		vec4 direction = normalize(target - origin);

		// Ray scatters are handled in this loop. There are no recursive traceRayEXT() calls in other shaders.
		for (uint b = 0; b <= raysterizer_info.number_of_bounces; ++b)
		{
			// If we've exceeded the ray bounce limit without hitting a light source, no light is gathered.
			// Light emitting materials never scatter in this implementation, allowing us to make this logical shortcut.
			if (b == raysterizer_info.number_of_bounces) 
			{
				rayColor = vec3(0, 0, 0);
				break;
			}

			uint ray_flags = gl_RayFlagsOpaqueEXT;
			uint cull_mask = 0xFF;
			uint sbt_record_offset = 0;
			uint sbt_record_stride = 0;
			uint miss_index = 0;
			const float tmin = 0.001;
			const float tmax = 10000.0;
			const int payload_location = MAIN_PAYLOAD;

			payload.depth = b;
			
			traceRayEXT(tlas,
						ray_flags,
						cull_mask,
						sbt_record_offset,
						sbt_record_stride,
						miss_index, 
						origin.xyz, 
						tmin, 
						direction.xyz, 
						tmax, 
						payload_location);
			
			const vec3 hitColor = payload.color_and_distance.rgb;
			const float t = payload.color_and_distance.w;
			const bool isScattered = payload.scatter_direction.w > 0;

			rayColor *= hitColor;

			// Trace missed, or end of trace.
			if (t < 0 || !isScattered)
			{				
				break;
			}

			// Trace hit.
			origin = origin + t * direction;
			direction = vec4(payload.scatter_direction.xyz, 0);
		}

		pixelColor += rayColor;
	}

	const bool accumulate = raysterizer_info.number_of_samples != raysterizer_info.total_number_of_samples;
	const vec3 accumulatedColor = pixelColor;

	pixelColor = accumulatedColor / raysterizer_info.total_number_of_samples;

	// Apply raytracing-in-one-weekend gamma correction.
	pixelColor = sqrt(pixelColor);

	if (raysterizer_info.show_heatmap)
	{
		const uint64_t deltaTime = clockARB() - clock;
		const float heatmapScale = 1000000.0f * raysterizer_info.heatmap_scale * raysterizer_info.heatmap_scale;
		const float deltaTimeScaled = clamp(float(deltaTime) / heatmapScale, 0.0f, 1.0f);

		pixelColor = heatmap(deltaTimeScaled);
	}

	//imageStore(AccumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
    
}