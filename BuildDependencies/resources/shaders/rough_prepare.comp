// The MIT License (MIT)
//
// Copyright (c) 2019,2020 The Raygun Authors.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#version 460
#extension GL_GOOGLE_include_directive : enable

#include "compute.h"

void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec4 rough = imageLoad(roughImage, pos);
    vec4 ru = imageLoad(roughImage, pos + ivec2(0, 1));
    vec4 rd = imageLoad(roughImage, pos - ivec2(0, 1));
    vec4 rl = imageLoad(roughImage, pos + ivec2(1, 0));
    vec4 rr = imageLoad(roughImage, pos - ivec2(1, 0));

    vec4 n = imageLoad(normalImage, pos);
    vec4 nu = imageLoad(normalImage, pos + ivec2(0, 1));
    vec4 nd = imageLoad(normalImage, pos - ivec2(0, 1));
    vec4 nl = imageLoad(normalImage, pos + ivec2(1, 0));
    vec4 nr = imageLoad(normalImage, pos - ivec2(1, 0));

    float uf = min(ru.a, rough.a) * clamp((1.f - distance(nu, n) * 10), 0, 1);
    float df = min(rd.a, rough.a) * clamp((1.f - distance(nd, n) * 10), 0, 1);
    float lf = min(rl.a, rough.a) * clamp((1.f - distance(nl, n) * 10), 0, 1);
    float rf = min(rr.a, rough.a) * clamp((1.f - distance(nr, n) * 10), 0, 1);

    vec4 trans = vec4(min(min(min(uf, df), lf), rf));
    imageStore(roughTransitions, pos, trans);

    imageStore(roughColorsA, pos, rough);
    imageStore(roughColorsB, pos, rough); // so we don't need to copy where there's no roughness
}
